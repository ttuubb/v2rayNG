// Mocks generated by Mockito 5.4.5 from annotations
// in v2rayng/test/unit/viewmodels/traffic_viewmodel_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i3;

import 'package:mockito/mockito.dart' as _i1;
import 'package:v2rayng/core/event_bus.dart' as _i6;
import 'package:v2rayng/core/services/traffic_service.dart' as _i2;
import 'package:v2rayng/models/traffic_history.dart' as _i5;
import 'package:v2rayng/models/traffic_stats.dart' as _i4;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: must_be_immutable
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

/// A class which mocks [TrafficService].
///
/// See the documentation for Mockito's code generation for more information.
class MockTrafficService extends _i1.Mock implements _i2.TrafficService {
  MockTrafficService() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i3.Stream<_i4.TrafficStats> get trafficStatsStream =>
      (super.noSuchMethod(
            Invocation.getter(#trafficStatsStream),
            returnValue: _i3.Stream<_i4.TrafficStats>.empty(),
          )
          as _i3.Stream<_i4.TrafficStats>);

  @override
  _i3.Future<List<_i5.TrafficHistory>> getTrafficHistory(String? serverId) =>
      (super.noSuchMethod(
            Invocation.method(#getTrafficHistory, [serverId]),
            returnValue: _i3.Future<List<_i5.TrafficHistory>>.value(
              <_i5.TrafficHistory>[],
            ),
          )
          as _i3.Future<List<_i5.TrafficHistory>>);

  @override
  _i3.Future<List<_i5.TrafficHistory>> getTrafficHistoryByPeriod(
    String? serverId,
    String? period,
  ) =>
      (super.noSuchMethod(
            Invocation.method(#getTrafficHistoryByPeriod, [serverId, period]),
            returnValue: _i3.Future<List<_i5.TrafficHistory>>.value(
              <_i5.TrafficHistory>[],
            ),
          )
          as _i3.Future<List<_i5.TrafficHistory>>);

  @override
  _i3.Future<void> recordTrafficStats(_i4.TrafficStats? stats) =>
      (super.noSuchMethod(
            Invocation.method(#recordTrafficStats, [stats]),
            returnValue: _i3.Future<void>.value(),
            returnValueForMissingStub: _i3.Future<void>.value(),
          )
          as _i3.Future<void>);

  @override
  _i3.Future<void> clearTrafficHistory(String? serverId) =>
      (super.noSuchMethod(
            Invocation.method(#clearTrafficHistory, [serverId]),
            returnValue: _i3.Future<void>.value(),
            returnValueForMissingStub: _i3.Future<void>.value(),
          )
          as _i3.Future<void>);

  @override
  _i3.Future<void> clearAllTrafficHistory() =>
      (super.noSuchMethod(
            Invocation.method(#clearAllTrafficHistory, []),
            returnValue: _i3.Future<void>.value(),
            returnValueForMissingStub: _i3.Future<void>.value(),
          )
          as _i3.Future<void>);

  @override
  void startMonitoring(String? serverId) => super.noSuchMethod(
    Invocation.method(#startMonitoring, [serverId]),
    returnValueForMissingStub: null,
  );

  @override
  void stopMonitoring() => super.noSuchMethod(
    Invocation.method(#stopMonitoring, []),
    returnValueForMissingStub: null,
  );
}

/// A class which mocks [EventBus].
///
/// See the documentation for Mockito's code generation for more information.
class MockEventBus extends _i1.Mock implements _i6.EventBus {
  MockEventBus() {
    _i1.throwOnMissingStub(this);
  }

  @override
  void emit<T>(T? event) => super.noSuchMethod(
    Invocation.method(#emit, [event]),
    returnValueForMissingStub: null,
  );

  @override
  _i3.Stream<T> on<T>() =>
      (super.noSuchMethod(
            Invocation.method(#on, []),
            returnValue: _i3.Stream<T>.empty(),
          )
          as _i3.Stream<T>);

  @override
  void dispose() => super.noSuchMethod(
    Invocation.method(#dispose, []),
    returnValueForMissingStub: null,
  );
}
