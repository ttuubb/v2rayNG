name: Build v2ray-core/xray-core

on:
  push:
    branches:
      - master  # 监听 master 分支的推送
  pull_request:
    branches:
      - master
  workflow_dispatch:  # 允许手动触发

jobs:
  build:
    name: Build for ${{ matrix.platform }}
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        include:
          - platform: windows-x86
            os: ubuntu-latest
          # 暂时注释其他平台，专注于修复 windows-x86
          # - platform: windows-amd64
          #   os: ubuntu-latest
          # - platform: android-arm
          #   os: ubuntu-latest
          # - platform: android-arm64
          #   os: ubuntu-latest
          # - platform: android-x86
          #   os: ubuntu-latest
          # - platform: android-x86_64
          #   os: ubuntu-latest
          # - platform: ios-arm64
          #   os: macos-latest
          # - platform: ios-x86_64
          #   os: macos-latest
    steps:
      - name: Checkout source code
        uses: actions/checkout@v4

      - name: Setup Go
        uses: actions/setup-go@v5
        with:
          go-version: '1.21'  # 适配 v2ray-core/xray-core

      - name: Install dependencies (Ubuntu)
        if: matrix.os == 'ubuntu-latest'
        run: |
          sudo apt update
          sudo apt install -y build-essential clang cmake pkg-config \
                              gcc g++ libgcc-13-dev \
                              mingw-w64-i686-dev mingw-w64-x86-64-dev
          # 暂时移除 Android NDK 以简化调试
          # wget -q https://dl.google.com/android/repository/android-ndk-r25b-linux.zip
          # unzip -q android-ndk-r25b-linux.zip
          # echo "ANDROID_NDK_HOME=$(pwd)/android-ndk-r25b" >> $GITHUB_ENV

      - name: Set environment variables
        run: |
          echo "CGO_ENABLED=1" >> $GITHUB_ENV
          case "${{ matrix.platform }}" in
            "windows-x86")
              echo "GOOS=windows" >> $GITHUB_ENV
              echo "GOARCH=386" >> $GITHUB_ENV
              echo "GO386=sse2" >> $GITHUB_ENV  # 强制 32 位模式
              echo "CC=/usr/bin/i686-w64-mingw32-gcc" >> $GITHUB_ENV
              echo "CXX=/usr/bin/i686-w64-mingw32-g++" >> $GITHUB_ENV
              echo "CGO_CFLAGS=-D_WIN32_WINNT=0x0600" >> $GITHUB_ENV
              echo "CGO_LDFLAGS=-lws2_32 -luserenv -lshlwapi" >> $GITHUB_ENV
              ;;
            # 其他平台的配置暂时注释
          esac
          # 输出环境变量以便调试
          echo "CC=$CC"
          echo "CXX=$CXX"
          echo "GOOS=$GOOS"
          echo "GOARCH=$GOARCH"
          echo "GO386=$GO386"
          echo "CGO_CFLAGS=$CGO_CFLAGS"
          echo "CGO_LDFLAGS=$CGO_LDFLAGS"

      - name: Build v2ray-core/xray-core
        run: |
          git clone --depth 1 https://github.com/v2ray/v2ray-core.git
          cd v2ray-core
          mkdir -p output
          go mod tidy
          go build -v -o output/v2ray-${{ matrix.platform }} ./main  # 添加 -v 标志输出详细日志

      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: v2ray-${{ matrix.platform }}
          path: v2ray-core/output/v2ray-*
