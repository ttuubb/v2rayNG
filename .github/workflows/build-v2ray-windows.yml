name: Build v2ray-core/xray-core

on:
  push:
    branches:
      - master
  pull_request:
    branches:
      - master
  workflow_dispatch:
  schedule:
    - cron: '0 0 * * 1'  # 每周一 00:00 UTC

jobs:
  build:
    name: Build for ${{ matrix.platform }}
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        include:
          - platform: windows-x86
            os: ubuntu-latest
          # 可根据需要恢复其他平台
          # - platform: windows-amd64
          #   os: ubuntu-latest
    steps:
      - name: Checkout source code
        uses: actions/checkout@v4

      - name: Setup Go
        uses: actions/setup-go@v5
        with:
          go-version: '1.21'

      - name: Install dependencies (Ubuntu)
        if: matrix.os == 'ubuntu-latest'
        run: |
          sudo apt update
          sudo apt install -y build-essential clang cmake pkg-config \
                              gcc g++ libgcc-13-dev \
                              mingw-w64-i686-dev mingw-w64-x86-64-dev

      - name: Set environment variables
        run: |
          echo "CGO_ENABLED=1" >> $GITHUB_ENV
          case "${{ matrix.platform }}" in
            "windows-x86")
              echo "GOOS=windows" >> $GITHUB_ENV
              echo "GOARCH=386" >> $GITHUB_ENV
              echo "GO386=sse2" >> $GITHUB_ENV
              echo "CC=/usr/bin/i686-w64-mingw32-gcc" >> $GITHUB_ENV
              echo "CXX=/usr/bin/i686-w64-mingw32-g++" >> $GITHUB_ENV
              echo "CGO_CFLAGS=-D_WIN32_WINNT=0x0600" >> $GITHUB_ENV
              echo "CGO_LDFLAGS=-lws2_32 -luserenv -lshlwapi" >> $GITHUB_ENV
              ;;
          esac

      - name: Build v2ray-core/xray-core
        run: |
          git clone --depth 1 https://github.com/v2ray/v2ray-core.git
          cd v2ray-core
          mkdir -p output
          go mod tidy
          go build -v -o output/v2ray-${{ matrix.platform }} ./main

      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: v2ray-${{ matrix.platform }}
          path: v2ray-core/output/v2ray-*

  release:
    needs: build  # 依赖 build 作业完成
    runs-on: ubuntu-latest
    if: github.event_name == 'schedule' || github.event_name == 'workflow_dispatch'  # 仅在计划任务或手动触发时运行
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          path: artifacts

      - name: Create Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}  # 默认提供的 token
        with:
          tag_name: "v${{ github.run_id }}-weekly"  # 使用运行 ID 生成唯一标签
          release_name: "Weekly Release ${{ github.run_id }}"
          draft: false
          prerelease: false

      - name: Upload Release Assets
        run: |
          for artifact in artifacts/v2ray-*/*; do
            gh release upload ${{ steps.create_release.outputs.id }} "$artifact" --clobber
          done
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
